--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" lpm_direction="UP" lpm_modulus=6 lpm_port_updown="PORT_UNUSED" lpm_width=3 clk_en clock q
--VERSION_BEGIN 8.1 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:05:19:10:49:01:SJ cbx_lpm_compare 2008:09:01:07:44:05:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_mgl 2008:08:08:15:16:18:SJ cbx_stratix 2008:08:05:17:10:23:SJ cbx_stratixii 2008:08:07:13:54:47:SJ  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_lcell_ff (aclr, clk, datain, ena, sclr, sdata, sload)
WITH ( x_on_violation)
RETURNS ( regout);
FUNCTION cmpr_7cc (dataa[2..0], datab[2..0])
RETURNS ( aeb);

--synthesis_resources = lut 3 reg 3 
SUBDESIGN cntr_okf
( 
	clk_en	:	input;
	clock	:	input;
	q[2..0]	:	output;
) 
VARIABLE 
	counter_reg_bit4a[2..0] : cycloneii_lcell_ff;
	add_sub5_result_int[3..0]	:	WIRE;
	add_sub5_cout	:	WIRE;
	add_sub5_dataa[2..0]	:	WIRE;
	add_sub5_datab[2..0]	:	WIRE;
	add_sub5_result[2..0]	:	WIRE;
	cmpr6 : cmpr_7cc;
	aclr_actual	: WIRE;
	add_sub_one_w[2..0]	: WIRE;
	add_value_w[2..0]	: WIRE;
	cnt_en	: NODE;
	compare_result	: WIRE;
	cout_actual	: WIRE;
	current_reg_q_w[2..0]	: WIRE;
	custom_cout_w	: WIRE;
	modulus_bus[2..0]	: WIRE;
	modulus_trigger	: WIRE;
	modulus_trigger_value_w[2..0]	: WIRE;
	safe_q[2..0]	: WIRE;
	time_to_clear	: WIRE;
	trigger_mux_w[2..0]	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_reg_bit4a[].aclr = aclr_actual;
	counter_reg_bit4a[].clk = clock;
	counter_reg_bit4a[].datain = trigger_mux_w[];
	counter_reg_bit4a[].ena = (clk_en & cnt_en);
	add_sub5_result_int[] = (0, add_sub5_dataa[]) + (0, add_sub5_datab[]);
	add_sub5_result[] = add_sub5_result_int[2..0];
	add_sub5_cout = add_sub5_result_int[3];
	add_sub5_dataa[] = current_reg_q_w[];
	add_sub5_datab[] = add_value_w[];
	cmpr6.dataa[] = safe_q[];
	cmpr6.datab[] = modulus_bus[];
	aclr_actual = B"0";
	add_sub_one_w[] = add_sub5_result[];
	add_value_w[] = B"001";
	cnt_en = VCC;
	compare_result = cmpr6.aeb;
	cout_actual = (custom_cout_w # (time_to_clear & updown_dir));
	current_reg_q_w[] = counter_reg_bit4a[].regout;
	custom_cout_w = (add_sub5_cout & add_value_w[0..0]);
	modulus_bus[] = B"101";
	modulus_trigger = cout_actual;
	modulus_trigger_value_w[] = ((! updown_dir) & modulus_bus[]);
	q[] = safe_q[];
	safe_q[] = counter_reg_bit4a[].regout;
	time_to_clear = compare_result;
	trigger_mux_w[] = (((! modulus_trigger) & add_sub_one_w[]) # (modulus_trigger & modulus_trigger_value_w[]));
	updown_dir = B"1";
END;
--VALID FILE
